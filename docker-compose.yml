version: '2'
services:
#  python:
#    build:
#      context: ./python
#      args:
#          - YARA_VERSION=${YARA_VERSION}
#          - SCANNER_BRANCH=${SCANNER_BRANCH}
#    volumes:
#      - docker-sync:${DESTINATION_PATH}:nocopy # will be mounted on to the value of DESTINATION_PATH
### Workspace Utilities Container ###########################
  workspace:
    build:
      context: ./workspace
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PROJECT_ROOT_NAME=${WORKSPACE_PROJECT_ROOT_NAME}
        - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
        - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
        - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
        - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
        - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
        - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
        - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
        - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
        - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
        - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
        - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
        - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
        - INSTALL_AEROSPIKE=${WORKSPACE_INSTALL_AEROSPIKE}
        - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
        - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
        - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
        - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
        - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
        - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
        - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
        - INSTALL_MC=${WORKSPACE_INSTALL_MC}
        - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
        - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
        - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
        - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
        - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
        - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
        - YARN_VERSION=${WORKSPACE_YARN_VERSION}
        - TZ=${WORKSPACE_TIMEZONE}
        - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
        - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
        - INSTALL_TIDEWAYS_XHPROF=${WORKSPACE_INSTALL_TIDEWAYS_XHPROF}
        - INSTALL_SSMTP=${WORKSPACE_INSTALL_SSMTP}
    volumes:
      - docker-sync:${DESTINATION_PATH}:nocopy # will be mounted on to the value of DESTINATION_PATH
      - ~/.ssh:/home/laradock/.ssh
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
    tty: true
    networks:
      - frontend
      - backend

### PHP-FPM Container #######################################
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
        - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
        - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
        - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
        - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
        - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
        - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
        - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
        - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
        - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
        - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
        - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
        - INSTALL_TIDEWAYS_XHPROF=${PHP_FPM_INSTALL_TIDEWAYS_XHPROF}
        - INSTALL_SSMTP=${PHP_FPM_INSTALL_SSMTP}
    volumes:
      - docker-sync:${DESTINATION_PATH}:nocopy # will be mounted on to the value of DESTINATION_PATH
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    ports:
      - "${PHP_FPM_SSH_PORT}:22"
    depends_on:
      - workspace
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    networks:
      - backend

### SSL ##################################
  ssl:
    image: paulczar/omgwtfssl
    volumes:
      - ./ssl:/certs
    environment:
      - SSL_SUBJECT=${SSL_SUBJECT}
      - SSL_DNS=${SSL_DNS}

### Nginx Server Container ##################################
  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
    volumes:
      - docker-sync:${DESTINATION_PATH}:nocopy # will be mounted on to the value of DESTINATION_PATH
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

### Postfix Server Container ################################
  postfix:
    build:
      context: ./postfix
    expose:
      - 25
    ports:
      - "${POSTFIX_SMTP_PORT}:25"
    environment:
      - SMTP_SERVER=
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
      - SERVER_HOSTNAME=${POSTFIX_HOSTNAMES}
    networks:
      - backend

### Redis Container #########################################
#
#  redis:
#    build: ./redis
#    volumes:
#      - ${DATA_SAVE_PATH}/redis:/data
#    ports:
#      - "${REDIS_PORT}:6379"
#    networks:
#      - backend

### Memcached ############################################
#    memcached:
#      build: ./memcached
#      volumes:
#        - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
#      ports:
#        - "${MEMCACHED_HOST_PORT}:11211"
#      depends_on:
#        - php-fpm
#      networks:
#        - backend

### Percona ################################################
#    percona:
#      build:
#        context: ./percona
#      environment:
#        - MYSQL_DATABASE=${PERCONA_DATABASE}
#        - MYSQL_USER=${PERCONA_USER}
#        - MYSQL_PASSWORD=${PERCONA_PASSWORD}
#        - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
#      volumes:
#        - ${DATA_PATH_HOST}/percona:/var/lib/mysql
#        - ${PERCONA_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
#      ports:
#        - "${PERCONA_PORT}:3306"
#      networks:
#        - backend

### RabbitMQ #############################################
    rabbitmq:
      build: ./rabbitmq
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      hostname: laradock-rabbitmq
      volumes:
        - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
      depends_on:
        - php-fpm
      networks:
        - backend

### Varnish ##########################################
  proxy:
    build: ./varnish
    ports:
      - "${VARNISH_PORT}:6081"
    expose:
      - 6082
    environment:
      - VARNISH_CONFIG=${VARNISH_CONFIG}
      - CACHE_SIZE=${VARNISH_PROXY1_CACHE_SIZE}
      - VARNISHD_PARAMS=${VARNISHD_PARAMS}
      - VARNISH_PORT=${VARNISH_PORT}
      - BACKEND_HOST=${VARNISH_PROXY1_BACKEND_HOST}
      - BACKEND_PORT=${VARNISH_BACKEND_PORT}
      - VARNISH_SERVER=${VARNISH_PROXY1_SERVER}
    depends_on:
      - nginx
    networks:
      - frontend

### Reverse Proxy Server Container ##################################
  reverse-proxy:
    build:
      context: ./reverse-proxy
    volumes:
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${REVERSE_PROXY_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - proxy
      - ssl
    networks:
      - frontend

### MongoDB ##############################################
#    mongo:
#      build: ./mongo
#      ports:
#        - "${MONGODB_PORT}:27017"
#      volumes:
#        - ${DATA_PATH_HOST}/mongo:/data/db
#      networks:
#        - backend

### ElasticSearch ########################################
#   elasticsearch:
#     build: ./elasticsearch
#     volumes:
#       - elasticsearch:/usr/share/elasticsearch/data
#     environment:
#       - cluster.name=laradock-cluster
#       - bootstrap.memory_lock=true
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     ports:
#       - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
#       - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
#     depends_on:
#       - php-fpm
#     networks:
#       - frontend
#       - backend

### Networks Setup ############################################
networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
### Volumes Setup #############################################
volumes:
#  mysql:
#  redis:
#    driver: "local"
  docker-sync:
    external:
      name: "${SYNC_NAME}-docker-sync"
